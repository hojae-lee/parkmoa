<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/images/**" location="/resources/" />
	<resources mapping="/assets/**" location="/assets/" />
	<resources mapping="/vendors/**" location="/parkmoa/vendors/" />
	<resources mapping="/css/**" location="/parkmoa/css/" />
	<resources mapping="/img/**" location="/parkmoa/img/" />
	<resources mapping="/js/**" location="/parkmoa/js/" />
	<resources mapping="/js/**" location="/parkmoa/js/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<context:component-scan
		base-package="com.kosmo.admin" />
	<context:component-scan
		base-package="com.kosmo.project3rd" />

	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="1000000" />
	</beans:bean>

	<beans:bean id="fileDownloadView"
		class="common.FileDownloadView" />

	<beans:bean id="fileViewResolver"
		class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="0" />
	</beans:bean>
	
	<!-- NaverLoginBO Class에 대한 Bean설정 추가 -->  
   <beans:bean id="naverLoginBO" class="com.kosmo.project3rd.NaverLoginBO" /> 


	<!-- SPRING JDBC를 사용하기 위한 빈 생성. 해당 XML파일에서 JDBC연결에 대한 빈을 생성한후 컨트롤러에서 자동주입(injection) 
		받아서 사용한다 -->

	<!-- 트랜잭션 처리를 위한 빈생성 1.트랜잭션 매니저를 이용한 처리 dataSource : DB연결에 대한 빈생성 template 
		: dataSource를 기반으로 생성한 JdbcTemplate타입의 빈 transactionManager : dataSource를 
		기반으로 생성한 DataSourceTransactionManager 타입의 빈 transactionDAO : template 빈 , 
		treansactionManager 빈을 기반으로 생성된 DAO 타입의 빈 -->

	<!-- <beans:bean name="template" class="org.springframework.jdbc.core.JdbcTemplate"> 
		<beans:property name="dataSource" ref="dataSource"/> </beans:bean> <beans:bean 
		name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<beans:property name="dataSource" ref="dataSource"/> </beans:bean> <beans:bean 
		name="transactionDAO" class="transaction.TicketDAO"> <beans:property name="template" 
		ref="template"/> <beans:property name="transactionManager" ref="transactionManager"/> 
		</beans:bean> -->
	<!-- 2. 트랜잭션 템플릿을 이용한 처리 -->
	<!-- <beans:bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
		<beans:property name="driverClassName" value="oracle.jdbc.OracleDriver"/> 
		<beans:property name="url" value="jdbc:oracle:thin:@localhost:1521:orcl"/> 
		<beans:property name="username" value="kosmo"/> <beans:property name="password" 
		value="1234"/> </beans:bean> <beans:bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<beans:property name="dataSource" ref="dataSource"/> </beans:bean> <beans:bean 
		name="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate"> 
		<beans:property name="transactionManager" ref="transactionManager" /> </beans:bean> 
		<beans:bean name="template" class="org.springframework.jdbc.core.JdbcTemplate"> 
		<beans:property name="dataSource" ref="dataSource"/> </beans:bean> <beans:bean 
		name="TransactionDAO" class="transaction.TicketTplDAO"> <beans:property name="template" 
		ref ="template" /> <beans:property name="transactionTemplate" ref ="transactionTemplate" 
		/> </beans:bean> -->

	<!-- DB연동 -->
	<beans:bean name="dataSource"
      class="org.springframework.jdbc.datasource.DriverManagerDataSource">
      <beans:property name="driverClassName"
         value="oracle.jdbc.OracleDriver" />
      <beans:property name="url"
         value="jdbc:oracle:thin:@localhost:1521:orcl" />
      <beans:property name="username" value="kosmo" />
      <beans:property name="password" value="1234" />
   </beans:bean>


	<!-- Mybatis 빈 생성 -->
	<beans:bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="mapperLocations"
			value="classpath:parkmoa/model/mapper/*.xml" />
	</beans:bean>
	<beans:bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg index="0"
			ref="sqlSessionFactory" />
	</beans:bean>


</beans:beans>
